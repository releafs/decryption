name: Image Processing Pipeline

on:
  # Trigger on push to main branch or when a file is pushed to input directory
  push:
    branches:
      - main
    paths:
      - 'decryption/input/**'  # Trigger when a file is pushed to 'decryption/input/'

jobs:
  process-images:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Allow pushing changes to the repository

    steps:
    # Step 1: Check out the repository
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        persist-credentials: true  # Ensure Git credentials are available

    # Step 2: Cache pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 3: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # Step 4: Install dependencies (only if not cached)
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt

    # Step 5: Ensure the input directory exists before running any scripts
    - name: Create input directory if missing
      run: mkdir -p decryption/input  # Create the input directory if it doesn't exist

    # Step 6: Debugging - List files in input directory to confirm PNG existence
    - name: Check input directory for PNGs
      run: |
        echo "Checking input directory for PNGs:"
        ls -la decryption/input/

    # Step 7: Run the main processing scripts
    - name: Run processing scripts
      run: |
        python scripts/script1.py
        python scripts/script2.py
        python scripts/script3.py

    # Step 8: Verify if the output file exists
    - name: Verify output file exists
      run: |
        if [ ! -f "process/merged_data_with_metadata.csv" ]; then
          echo "Output file not found!"
          exit 1
        else
          echo "Output file found!"
        fi

    # Step 9: Upload the processed CSV to AWS S3
    - name: Upload processed result to S3
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl public-read  # Optional: Set file permissions
      env:
        SOURCE_DIR: "process/merged_data_with_metadata.csv"
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'  # Replace with your AWS region

    # Step 10: Clean up process directory
    - name: Clean up process directory
      run: rm -rf process/*
